# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  config.vm.define "toolkit-elk", primary: true, autostart: true do |ps|
    # set box to official CentOS 7 image
    ps.vm.box = "centos/7"
    # explcitly set shared folder to virtualbox type. If not set will choose rsync 
    # which is just a one-way share that is less useful in this context
    ps.vm.synced_folder "..", "/vagrant", type: "virtualbox"
    # Set hostname
    ps.vm.hostname = "toolkit-elk"
    
    #increase memory
    ps.vm.provider "virtualbox" do |v|
        v.memory = 4096
    end
    
    # Enable IPv4. Cannot be directly before or after line that sets IPv6 address. Looks
    # to be a strange bug where IPv6 and IPv4 mixed-up by vagrant otherwise and one 
    #interface will appear not to have an address. If you look at network-scripts file
    # you will see a mangled result where IPv4 is set for IPv6 or vice versa
    ps.vm.network "private_network", ip: "10.7.7.7"
    
    # Setup port forwarding to apache
    ps.vm.network "forwarded_port", guest: 443, host: "7443", host_ip: "127.0.0.1"
    
    # Enable IPv6. Currently only supports setting via static IP. Address below in the
    # reserved local address range for IPv6
    ps.vm.network "private_network", ip: "fdac:218a:75e5:79c8::7"
    
    #Disable selinux
    ps.vm.provision "shell", inline: <<-SHELL
        sed -i s/SELINUX=enforcing/SELINUX=permissive/g /etc/selinux/config
    SHELL

    #Install all requirements and perform initial setup
    ps.vm.provision "shell", inline: <<-SHELL
        yum install -y epel-release yum-utils
        yum install -y http://software.internet2.edu/rpms/el7/x86_64/4/packages/perfSONAR-repo-0.10-1.noarch.rpm
        yum-config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
        yum clean all
        # Add Opendistro repository
        curl https://d3g5vo6xdbdb9a.cloudfront.net/yum/opendistroforelasticsearch-artifacts.repo -o /etc/yum.repos.d/opendistroforelasticsearch-artifacts.repo
        #Install a few things first including java for logstash
        yum install -y \
            gcc\
            kernel-devel\
            kernel-headers\
            dkms\
            make\
            bzip2\
            perfsonar-toolkit\
            python3 \
            python3-requests\
            opendistroforelasticsearch \
            opendistroforelasticsearch-kibana \
            docker-ce\
            docker-ce-cli \
            java-11-openjdk

        # Esmond installs an old java for cassandra. Use the newer version from 
        # Elastic for logstash. Interstingly ElasticSearch ships with its own version
        # of Java 13 that lives in /usr/share/elasticsearch/jdk
        cp /vagrant/toolkit/files/java.sh /etc/profile.d/java.sh
        source /etc/profile.d/java.sh

        # Install logstash-oss v7.12
        sudo rpm -i https://artifacts.elastic.co/downloads/logstash/logstash-oss-7.12.1-x86_64.rpm
 
        # Set logstash variable
        echo "XPACK_MONITORING_ENABLED=false" >> /etc/sysconfig/logstash

        #daemon reload
        systemctl daemon-reload
        
        #Disable cassandra and esmond
        systemctl stop cassandra
        systemctl disable cassandra
        rm /etc/httpd/conf.d/apache-esmond.conf
        systemctl restart httpd
        
        #Enable docker
        systemctl enable --now docker
        curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
        chmod 755 /usr/local/bin/docker-compose
        ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
        
        #build containers
        cd /vagrant
        # /usr/bin/docker-compose -f docker-compose.build.yml build
        
        #CONFIGURE OPENDISTRO
        systemctl enable --now elasticsearch.service
        /vagrant/toolkit/scripts/pselastic_secure.sh
        
        #CONFIGURE LOGSTASH
        /usr/share/logstash/bin/system-install /etc/logstash/startup.options systemd
        cp -r /vagrant/logstash_pipeline/* /etc/logstash/conf.d/
        cp -f /vagrant/toolkit/files/01-inputs.conf /etc/logstash/conf.d/01-inputs.conf
        cp -f /vagrant/toolkit/files/99-outputs.conf /etc/logstash/conf.d/99-outputs.conf
        ## Probably a better way to do this, but symlink to match directory structure of docker
        ln -s /etc/logstash/conf.d /usr/share/logstash/pipeline

        #Enable and start logstash
        systemctl enable --now logstash.service

        #CONFIGURE KIBANA FOR OPENDISTRO
        KIBANA_PASS=$(grep "kibanaserver " /etc/perfsonar/elastic/auth_setup.out | head -n 1 | sed 's/^kibanaserver //')
        sed -i "s/elasticsearch.password: kibanaserver/elasticsearch.password: ${KIBANA_PASS}/g" /etc/kibana/kibana.yml
        systemctl enable --now kibana.service
        
        #CONFIGURE DEFAULT ARCHIVER
        cp /vagrant/toolkit/files/http_logstash.json /etc/pscheduler/default-archives/http_logstash.json
        systemctl restart pscheduler-archiver
        
        #START DOCKER CONTAINERS
        #cd /vagrant/toolkit
        #/usr/bin/docker-compose -f docker-compose.toolkit.yml up -d
        
        #Configure httpd proxy
        cp /vagrant/toolkit/files/apache-elastic.conf /etc/httpd/conf.d/apache-elastic.conf
        cp /vagrant/toolkit/files/apache-elmond.conf /etc/httpd/conf.d/apache-elmond.conf
        systemctl restart httpd
    SHELL
  end
end
